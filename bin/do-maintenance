#! /bin/env bash

do_all=''
do_backup=''
do_image_update=''
do_dns_update=''

while (( "$#" > 0 )); do
    case "$1" in
        --backup) do_backup=y; shift ;;
        --image-update) do_image_update=y; shift ;;
        --dns-update) do_dns_update=y; shift ;;
        --all) do_all=y; shift ;;
        *) shift ;;
    esac
done


bin_dir=$(readlink -f "$(dirname $(which $0))")

[ -f "${bin_dir}/../.env" ] && source "${bin_dir}/../.env"

################
#  Do backups  #
################
function backup () {
    external=$1
    for file in ${bin_dir}/../services/*/bin/backup; do
        echo "[backup] Running backups for ${file}"
        "$file" daily $external
        [[ $(date +'%A') == Sunday ]] && "$file" weekly $external
    done

    [ -n "$external" ] && MUSIC_BACKUP_DESTINATION="${MUSIC_REMOTE_BACKUP_DESTINATION}"
    [ ! -d "${MUSIC_BACKUP_DESTINATION}" ] && mkdir -p "${MUSIC_BACKUP_DESTINATION}"

    # Backup music data
    "${bin_dir}/backup-incr" \
        --dest "${MUSIC_BACKUP_DESTINATION}" \
        --prefix music_daily \
        --max-bkp 180 \
        --user "${LOGIN}" \
        --group ${MY_GROUP} \
        --backup "${MUSIC_FOLDER}/music_clean" \
        --backup "${MUSIC_FOLDER}/Classique" \
        --backup "${MUSIC_FOLDER}/beets-library.db"
}

if [[ -n "$do_all" ]] || [[ -n "$do_backup" ]]; then
    backup
    [ -e "/dev/disk/by-uuid/cb9efc14-4e1d-458e-8d3a-67d3b947954d" ] && backup --external
fi

##########################
#  Update docker images  #
##########################
if [[ -n "$do_all" ]] || [[ -n "$do_image_update" ]]; then
    "${bin_dir}/docker-update-images"

    for file in ${bin_dir}/../services/*/bin/update; do
        echo "Running update for $file"
        "$file"
    done
fi

########################
#  Update DNS entries  #
########################
if [[ -n "$do_all" ]] || [[ -n "$do_dns_update" ]]; then
    pushd "${bin_dir}/../services/ddclient/" > /dev/null
    ./update_dns
    popd > /dev/null
fi
