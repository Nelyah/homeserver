{
	servers {
		trusted_proxies static private_ranges
		listener_wrappers {
			# The proxy_protocol wrapper tells Caddy to expect a PROXY header
			# (which carries the real client IP) from upstream proxies.
			proxy_protocol {
				# Set a timeout of 2 seconds for receiving the PROXY header.
				# This ensures that Caddy won’t wait indefinitely if the header isn’t sent.
				timeout 2s

				# Allow connections from the 100.64.0.0/10 IP range.
				# This is typically the range used by the upstream proxy (e.g. FRP server)
				# that sends the correct PROXY header; it prevents headers from untrusted sources.
				# In this case, this includes any address from my tailnet
				allow 100.64.0.0/10

				# Set fallback_policy to "use".
				# With this policy, if a valid PROXY header is present, Caddy will use its values (e.g. the client's real IP).
				# If the header isn’t present, Caddy will simply use the connection’s original remote address.
				# This provides flexibility, ensuring that connections without the header are still processed.
				fallback_policy use
			}
			# The tls wrapper follows, ensuring that after handling the PROXY header,
			# Caddy proceeds with the TLS handshake (i.e. it wraps the connection in TLS).
			tls
		}
	}
}

(security_headers) {
	header {
		X-Robots-Tag "noindex, nofollow"
		X-Content-Type-Options "nosniff"
		X-Frame-Options "SAMEORIGIN"
		Referrer-Policy "no-referrer"
		Strict-Transport-Security "max-age=15552000; includeSubDomains; preload"
		X-XSS-Protection: "1; mode=block"

		# https://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html
		X-Permitted-Cross-Domain-Policies "none"
	}
}

(is_not_whitelist) {
	not remote_ip private_ranges
	# Allowing Tailscale subnet
	not remote_ip 100.64.0.0/10
}

(restrict_to_lan) {
	@restricted_location {
		path /*
		import is_not_whitelist
	}
	respond @restricted_location "Access Denied" 403 {
		close
	}
}

# Define reusable snippet for authentication forwarding
(auth_forward) {
	uri /outpost.goauthentik.io/auth/caddy

	# Capitalization of the headers is important, otherwise they will be empty
	copy_headers X-Authentik-Username X-Authentik-Groups X-Authentik-Entitlements X-Authentik-Email X-Authentik-Name X-Authentik-Uid X-Authentik-Jwt X-Authentik-Meta-Jwks X-Authentik-Meta-Outpost X-Authentik-Meta-Provider X-Authentik-Meta-App X-Authentik-Meta-Version

	# Optional, trust all private ranges (should be restricted to the outpost’s IP)
	trusted_proxies private_ranges
	trusted_proxies 100.64.0.0/10
}

# Define reusable snippet for reverse proxy to the outpost
(reverse_proxy_outpost) {
	reverse_proxy /outpost.goauthentik.io/* authentik_server:9000 {
		header_up Host {http.reverse_proxy.upstream.hostport}
	}
}

(sso_at_location) {
	import reverse_proxy_outpost

	@is_not_whitelist {
		import is_not_whitelist
	}

	forward_auth {args[0]} authentik_server:9000 {
		import auth_forward
	}
}

(sso_if_not_whitelist) {
	@is_not_whitelist {
		import is_not_whitelist
	}

	import reverse_proxy_outpost

	forward_auth @is_not_whitelist authentik_server:9000 {
		import auth_forward
	}
}

cloud.nelyah.eu {
	import security_headers

	request_body {
		max_size 5GB
	}

	root * /php-fpm-root/nextcloud/
	file_server
	php_fastcgi nextcloud:9000 {
		root /var/www/html/

		# This is required to inform Nextcloud that it shouldn't be setting
		# headers itself. That's the job of the reverse proxy
		env modHeadersAvailable true
	}

	redir /.well-known/carddav /remote.php/dav 301 permanent
	redir /.well-known/caldav /remote.php/dav 301 permanent

	@forbidden {
		path /.htaccess
		path /data/*
		path /config/*
		path /db_structure
		path /.xml
		path /README
		path /3rdparty/*
		path /lib/*
		path /templates/*
		path /occ
		path /console.php
	}
	respond @forbidden "Access Denied" 403 {
		close
	}
}

pihole.nelyah.eu {
	import security_headers
	reverse_proxy pihole
	import sso_if_not_whitelist
}

gitea.nelyah.eu {
	import security_headers
	reverse_proxy gitea:3000
	import sso_if_not_whitelist
}

blog.nelyah.eu {
	redir https://wheelingtheworld.eu{uri} permanent
}

wheelingtheworld.eu {
	import security_headers
	reverse_proxy wordpress

	@restricted_location {
		path /wp-admin/*
		path /wp-login.php
		not remote_ip private_ranges
		# Allowing tailscale subnet
		not remote_ip 100.64.0.0/10
	}
	respond @restricted_location "Access Denied" 403 {
		close
	}
}

influxdb.nelyah.eu {
	import security_headers
	reverse_proxy influxdb:8086
	import sso_if_not_whitelist
}

wiki.nelyah.eu {
	import security_headers
	reverse_proxy bookstack
}

music-mum.nelyah.eu {
	import security_headers
	reverse_proxy navidrome_mum:8080
}

music.nelyah.eu {
	import security_headers
	reverse_proxy navidrome
}

prometheus.nelyah.eu {
	import security_headers
	reverse_proxy prometheus:9090
	import sso_if_not_whitelist
}

grafana.nelyah.eu {
	import security_headers
	import sso_if_not_whitelist

	# Actual site configuration below, for example
	reverse_proxy grafana:3000
}

emby.nelyah.eu {
	import security_headers
	reverse_proxy emby:8096
}

cinema.nelyah.eu {
	import security_headers
	reverse_proxy emby:8096
}

photos.nelyah.eu {
	import security_headers
	reverse_proxy photoprism:2342
	import sso_if_not_whitelist
}

watchtower.nelyah.eu {
	import security_headers
	import restrict_to_lan
	reverse_proxy watchtower:8080
}

audiobookshelf.nelyah.eu {
	import security_headers
	reverse_proxy audiobookshelf
}

ghost.nelyah.eu {
	redir https://stories.nelyah.eu{uri} permanent
}

stories.nelyah.eu {
	import security_headers
	reverse_proxy ghost:2368
	@restricted {
		path /ghost*
		not path /ghost/api*
	}

	import sso_at_location @restricted
}

auth.nelyah.eu {
	reverse_proxy authentik_server:9000
}

vault.nelyah.eu {
	import security_headers
	reverse_proxy vault:8200
	import sso_if_not_whitelist
}
